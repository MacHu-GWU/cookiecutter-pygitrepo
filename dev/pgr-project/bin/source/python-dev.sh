#!/bin/bash
# -*- coding: utf-8 -*-
#
# Python library development bash script tools.
#
# This script should be sourced to use.
#
# This file is generated by cookiecutter-pygitrepo {{ cookiecutter._cookiecutter_pygitrepo_version }}: https://github.com/MacHu-GWU/cookiecutter-pygitrepo/tree/{{ cookiecutter._cookiecutter_pygitrepo_version }}

if [ -n "${BASH_SOURCE}" ]
then
    dir_here="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
else
    dir_here="$( cd "$(dirname "$0")" ; pwd -P )"
fi

dir_bin="$(dirname "${dir_here}")"
dir_project_root=$(dirname "${dir_bin}")
source "${dir_bin}/source/bash-helpers.sh"

#--- read variable value from ${dir_bin}/pgr/pygitrepo.py file
# git repo


#dir_unit_test="$(python "${dir_bin}/pgr/pygitrepo.py" "DIR_UNIT_TESTS")"
#
#dir_sphinx_doc="$(python "${dir_bin}/pgr/pygitrepo.py" "DIR_SPHINX_DOC")"
#dir_sphinx_doc_source="$(python "${dir_bin}/pgr/pygitrepo.py" "DIR_SPHINX_DOC_SOURCE")"
#dir_sphinx_doc_build_html="$(python "${dir_bin}/pgr/pygitrepo.py" "DIR_SPHINX_DOC_BUILD_HTML")"
#path_sphinx_doc_build_html_index="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_SPHINX_DOC_BUILD_HTML_INDEX")"
#
## virtualenv
#dir_all_python_versioned_venv="$(python "${dir_bin}/pgr/pygitrepo.py" "DIR_ALL_PYTHON_VERSIONED_VENV")"

#

#bin_python="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_PYTHON")"

#bin_activate="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_ACTIVATE")"
#bin_pytest="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_PYTEST")"
#
#open_command="$(python "${dir_bin}/pgr/pygitrepo.py" "OPEN_COMMAND")"


pprint() {
    python "${dir_bin}/pgr/pygitrepo_print.py" "$1"
}



#---


venv_up() {
    dir_venv="$(python "${dir_bin}/pgr/pygitrepo.py" "DIR_VENV")"
    bin_global_python="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_BIN_GLOBAL_PYTHON")"
    bin_pip="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_PIP")"

    pprint "[pygitrepo] {FORE_CYAN}create a virtualenv at {STYLE_RESET_ALL}${dir_venv}"
    if [ -e "${dir_venv}" ]; then
        pprint "[pygitrepo] {FORE_CYAN}  skip, {STYLE_RESET_ALL}${dir_venv} {FORE_CYAN}already exists"
    else
        virtualenv -p "${bin_global_python}" "${dir_venv}"
        "${bin_pip}" install --upgrade pip
        pprint "[pygitrepo] {FORE_CYAN}  done"
    fi
}

venv_remove() {
    dir_venv="$(python "${dir_bin}/pgr/pygitrepo.py" "DIR_VENV")"
    pprint "[pygitrepo] {FORE_CYAN}remove virtualenv at ${dir_venv}"
    if [ -e "${dir_venv}" ]; then
        rm -r "${dir_venv}"
        pprint "[pygitrepo] {FORE_CYAN}  done"
    else
        pprint "[pygitrepo] {FORE_CYAN}  skip, {STYLE_RESET_ALL}${dir_venv} {FORE_CYAN}doesn't exist"
    fi
}

# Install the package to virtualenv in editable mode.
pip_dev_install() {
    package_name="$(python "${dir_bin}/pgr/pygitrepo.py" "PACKAGE_NAME")"
    bin_pip="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_PIP")"
    pprint "[pygitrepo] {FORE_CYAN}install '${package_name}' to virtualenv in editable mode"
    "${bin_pip}" install --editable "${dir_project_root}"
    pprint "[pygitrepo] {FORE_CYAN}  done"
}

# Install the package to virtualenv in regular mode.
pip_install() {
    package_name="$(python "${dir_bin}/pgr/pygitrepo.py" "PACKAGE_NAME")"
    bin_pip="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_PIP")"
    pprint "[pygitrepo] {FORE_CYAN}install '${package_name}' to virtualenv"
    "${bin_pip}" install "${dir_project_root}"
    pprint "[pygitrepo] {FORE_CYAN}  done"
}

# Uninstall the package from virtualenv.
pip_uninstall() {
    package_name="$(python "${dir_bin}/pgr/pygitrepo.py" "PACKAGE_NAME")"
    bin_pip="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_PIP")"
    python "${dir_bin}/pgr/pygitrepo_print.py" "[pygitrepo] {FORE_CYAN}uninstall '${package_name}' from virtualenv"
    "${bin_pip}" uninstall -y "${package_name}"
    pprint "[pygitrepo] {FORE_CYAN}  done"
}

# Install dev dependencies in requirements-dev.txt
req_dev() {
    bin_pip="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_PIP")"
    path_req_dev_file="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_REQUIREMENTS_DEV_FILE")"
    pprint "[pygitrepo] {FORE_CYAN}install dependencies in requirements-dev.txt to virtualenv"
    "${bin_pip}" install -r "${path_req_dev_file}"
    pprint "[pygitrepo] {FORE_CYAN}  done"
}

# Install dev dependencies in requirements-test.txt
req_test() {
    bin_pip="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_PIP")"
    path_req_test_file="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_REQUIREMENTS_TEST_FILE")"
    pprint "[pygitrepo] {FORE_CYAN}install dependencies in requirements-test.txt to virtualenv"
    "${bin_pip}" install -r "${path_req_test_file}"
    pprint "[pygitrepo] {FORE_CYAN}  done"
}

# Install dev dependencies in requirements-doc.txt
req_doc() {
    bin_pip="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_PIP")"
    path_req_doc_file="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_REQUIREMENTS_DOC_FILE")"
    pprint "[pygitrepo] {FORE_CYAN}install dependencies in requirements-doc.txt to virtualenv"
    "${bin_pip}" install -r "${path_req_doc_file}"
    pprint "[pygitrepo] {FORE_CYAN}  done"
}

# Build local doc
build_doc() {
#    path_sphinx_doc_build_html_index="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_SPHINX_DOC_BUILD_HTML_INDEX")"
    # virtualenv
#    dir_all_python_versioned_venv="$(python "${dir_bin}/pgr/pygitrepo.py" "DIR_ALL_PYTHON_VERSIONED_VENV")"
#    bin_python="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_PYTHON")"
#    bin_pytest="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_PYTEST")"
    dir_sphinx_doc="$(python "${dir_bin}/pgr/pygitrepo.py" "DIR_SPHINX_DOC")"
    dir_sphinx_doc_source="$(python "${dir_bin}/pgr/pygitrepo.py" "DIR_SPHINX_DOC_SOURCE")"
    dir_sphinx_doc_build_html="$(python "${dir_bin}/pgr/pygitrepo.py" "DIR_SPHINX_DOC_BUILD_HTML")"
    bin_activate="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_ACTIVATE")"

    python "${dir_bin}/pgr/pygitrepo_print.py" "[pygitrepo] {FORE_CYAN}Build doc at ${dir_sphinx_doc_build_html}"
    rm_if_exists "${dir_sphinx_doc_build_html}"
    rm_if_exists "${dir_sphinx_doc_source}/${package_name}"
    (
        source "${bin_activate}";
        cd "${dir_sphinx_doc}" || exit;
        make html;
    )
}
build_doc
build_doc_only() {
    python "${dir_bin}/pgr/pygitrepo_print.py" "[pygitrepo] {FORE_CYAN}Build doc at ${dir_sphinx_doc_build_html}"
    rm_if_exists "${dir_sphinx_doc_source}/${package_name}"
    (
        source "${bin_activate}";
        cd "${dir_sphinx_doc}" || exit;
        make html;
    )
}